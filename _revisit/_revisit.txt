About: changes previously uncommited (git diffs for each linked file):

05-longest-palindromic-substring:
-    def longestPalindrome_TwoPointers_ClaifyIndexes(self, s: str) -> str:
+    def longestPalindrome_TwoPointers_ClarifyIndexes(self, s: str) -> str:
-test_functions = [ s.longestPalindrome_BruteForce, s.longestPalindrome_DP_BottomUp, s.longestPalindrome_TwoPointers, s.longestPalindrome_TwoPointers_ClaifyIndexes, ]
+test_functions = [ s.longestPalindrome_BruteForce, s.longestPalindrome_DP_BottomUp, s.longestPalindrome_TwoPointers, s.longestPalindrome_TwoPointers_ClarifyIndexes, ]


101-symmetric-tree:
-    def isSymmetric_iterative(self, root: Optional[TreeNode]) -> bool:
+    def isSymmetric_Iterative(self, root: Optional[TreeNode]) -> bool:


108-convert-sorted-array-to-binary-search-tree:
added whitespace


29-divide-two-integers.cpp:
-			temp <<= 1;
-			powerOf2 <<= 1;
+			temp <<= 1;					//	temp += temp
+			powerOf2 <<= 1;				//	powerOf2 += powerOf2

+//	Can't handle negative divisor
+int f_simple_iterativeAddPower2s(int dividend, int divisor) {
+	vector<int> doubles;
+	vector<int> powersOfTwo;
+	int powerOfTwo = 1;
+	while (divisor <= dividend) {
+		powersOfTwo.push_back(powerOfTwo);
+		doubles.push_back(divisor);
+		powerOfTwo += powerOfTwo;
+		divisor += divisor;
+	}
+	int result = 0;
+	for (int i = doubles.size()-1; i >= 0; --i) {
+		if (doubles[i] <= dividend) {
+			result += powersOfTwo[i];
+			dividend -= doubles[i];
+		}
+	}
+	return result;
+}

-	return 0;
+	if (dividend == INT_MIN && divisor == -1) {
+		return INT_MAX;
+	}
+	//	Converting inputs to negative allows coverage of the largest possible range of numbers (to avoid overflow).
+	//	We store the number of inputs that were previously negative to allow us to determine correct sign of result.
+	int count_negatives = 2;
+	if (dividend > 0) {
+		--count_negatives;
+		dividend = -dividend;
+	}
+	if (divisor > 0) {
+		--count_negatives;
+		divisor = -divisor;
+	}
+
+	vector<int> doubles;
+	vector<int> powersOfTwo;
+	int powerOfTwo = -1;
+	while (divisor >= dividend) {
+		doubles.push_back(divisor);
+		powersOfTwo.push_back(powerOfTwo);
+		if (divisor < INT_MIN/2) {
+			break;
+		}
+		divisor <<= 1;			//	divisor += divisor
+		powerOfTwo <<= 1;		//	powerOfTwo += powerOfTwo
+	}
+	int result = 0;
+	for (int i = doubles.size()-1; i >= 0; --i) {
+		if (doubles[i] >= dividend) {
+			result += powersOfTwo[i];
+			dividend -= doubles[i];
+		}
+	}
+
+	//	Return result with correct sign
+	if (count_negatives != 1) {
+		return -result;
+	}
+	return result;
+

-vector<function<int(int,int)>> test_functions = { f_ref, f_iterative, f_iterativePower2, };
-vector<string> test_functions_names = { "f_ref", "f_iterative", "f_iterativePower2", };
+vector<function<int(int,int)>> test_functions = { f_ref, f_iterative, f_iterativePower2, f_iterativeAddPower2s, };
+vector<string> test_functions_names = { "f_ref", "f_iterative", "f_iterativePower2", "f_iterativeAddPower2s", }


94-binary-tree-inorder-traversal
-        j
+


714-best-time-to-buy-and-sell-stock-with-fee
Untracked (empty)


168-excel-sheet-column-title/171-excel-sheet-column-number:
Solve
The hardest should be (is) easy problem I've seen in some kind - an easy problem with a solution (somehow) just out of reach (I mean, how hard did you really try - never even using paper) (actually, I'm not sure without paper I ever would have figured out the 'first, -= 1' step?)




122-best-time-to-buy-and-sell-stock-ii: 
Dynamic programming solutions (top down and bottom up)


188-best-time-to-buy-and-sell-stock-iv:
merging solution (missing) [...] (merging is the fastest solution?)
one/two table DP solutions (not understood well enough to remember)
(for one-table solution -> more easily understood with i/j reversed?)


80-remove-duplicates-from-sorted-array-ii:
Remember (intuition behind) O(n) two-pointers solution


863-all-nodes-distance-k:
Binary tree search problem: Equivalent-graph DFS/BFS ans
(revist after-completing/with-insights-from 'theory/graph-traversal-[dfs|bfs]')

